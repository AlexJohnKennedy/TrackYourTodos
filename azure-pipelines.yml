# Attempt at a custom Azure-pipelines CI/CD pipeline definition. This is a YAML file which
# defines the stages/jobs/steps to take as part of the pipeline; basically like the Jenkinsfile
# one would use if they were using Jenkins!

# Reference
# #########
# YAML Schema:      https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops 
# Built-in 'tasks': https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops
# Quickstart guide: https://docs.microsoft.com/en-us/azure/devops/pipelines/customize-pipeline?view=azure-devops


# Specifies the name formatting for this pipeline as a whole. I.e., the formatting of the name for each
# 'run' of this pipeline.
name: $(Date:yyyyMMdd)$(Rev:.r)

# Specify any pipeline-level variables to use. These may be hardcoded values or references.
# variables: ## NOTHING AT THE MOMENT ##

# Specify to trigger this CI pipeline whenever changes are pushed to the master branch. TODO: Make 'release' version later!
trigger: 
- master

# Specify triggers for pull-requests. I don't want this to occur at this point in time.
pr: 
- none

# Define the 'stages' of this pipeline. A stage is a high level 'operation' that form the biggest building blocks
# of a pipeline, and are usually conducted sequentially.
stages:
- stage: buildReactApp  # name of the stage
  displayName: Build and bundle React app with 'npm run-script build'  # name to display in the UI
  dependsOn: [] # Specifies stages (by name) which this stage must run AFTER. Controls parallelism of stage operation
  jobs:
  - job: create_react_app_build
    displayName: create-react-app build
    continueOnError: false
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: outputs
    steps:
    - bash: npm install
      workingDirectory: ClientApp
    # Execute the 'npm run-script build' command in the React-app directory
    - bash: npm run-script build
      workingDirectory: ClientApp
    - bash: ls ClientApp



# This stage will run a 'dotnet build' command, to ensure the project can build successfully. If it passes, we will
# deploy to kudu using the kudu rest API, in a later stage.
- stage: buildDotNetCoreApp
  displayName: Build the backend api
  dependsOn: [] # Can run in parallel with React App deployment, since they are independent applications 
  jobs:
  - job: dotnetbuild
    displayName: dotnet build job
    continueOnError: false  # fail the pipeline if this step fails
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: outputs
    steps:
    # Use the DotNetCoreCLI@2 built-in task to perform a simple build
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: AspNetCoreApiBackend/AspNetCoreApiBackend.csproj

# This stages uses kudu rest API commands to explicitly deploy the api app to Azure app-service. This only runs
# if the .net-core build stage passed, to make sure we don't deploy broken code. 
# once the initial publish completes, we remotely run 'dotnet ef database update' to ensure EF-Migrations are applied
# to our Azure SQL Database. This command can be executed on the target machine using the /api/command Kudu REST Api
# endpoint
#- stage: publishDotNetCoreToKudu
#  displayName: Publishes API to Kudu on App Services
#  dependsOn: [buildDotNetCoreApp] 
