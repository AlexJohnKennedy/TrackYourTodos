version: '3'

# Define our 'services'. These become the hostnames for each container which runs the service
# inside the docker-compose virtual network, allowing our containers to address each other!
# This also defines the images that docker-compose with run as containers at the same time
# when we do 'docker-compose up'.
services:
  # React app production build, served statically on port 3000
  # NOTE: FOR Google Auth to work, when running the containers locally, we need to use xip.io
  # to resolve a wildcard ip address so that google actually lets us auth. Google doesn't support
  # public ip addresses, so 192.168.99.100:3000 won't work directly, find the app on:
  # http://www.192.168.99.100.xip.io:3000/
  todo-app:
    build:
      context: ./ClientApp
      dockerfile: Dockerfile
      # pass in a build-time argument which will be set as an environment variable while the image is being built
      args:
        - REACT_APP_API_ADDRESS=http://192.168.99.100:5000
        # - REACT_APP_API_ADDRESS=http://localhost:5000
    ports:
      - "3000:3000"
  # Setup a postgres instance, which does not publically expose it's ports because it is only communicated with by
  # our API app, which will talk to it via the docker-compose private network.
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
      - POSTGRES_DB=testpostgres
    # No volume for now: it will just use temporary data.
    #volumes:
    #  - ./volumes/data/db:/var/lib/postgresql/data
    
  # Api backend. At this time, it's just running in development mode using 'dotnet run', and using
  # an in-memory database.
  todo-api:
    build: 
      context: ./AspNetCoreApiBackend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
    - "postgres"